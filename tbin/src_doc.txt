Setup under OS/2 and Windows:
   1. set WATCOM=....  in path
   2. copy src\setup.cmd.template src\setup.cmd
   3. edit src\setup.cmd
   4. if QS is not in the root, update Doxyfile INPUT (optional)

Setup under Linux:
   1. install Open Watcom 1.9 (install hanged on my 64-bit Ubuntu, but works
      fine when just copied from 32-bit linux).
   2. call _setmod.sh - to set exec attr on all batches & executables
   3. make sure you have 32-bit libc on 64-bit system (else spprj module will
      fail).
   4. cp src\setup.sh.template src\setup.sh
   5. edit src\setup.sh (both WATCOM & QS_ROOT vars)
   6. all .cmd-s below have .sh pair for it

Build:
   _all.cmd                        - build all
   system\src\init\make.cmd        - build os2ldr
   system\src\ldrapps\make.cmd     - build all qsinit.ldi apps
   system\src\ldrapps\make.cmd app - build single qsinit.ldi app
                                     (ex. "make sysview")
   target dir - this (tbin) dir.

   Apps in "system\src\usrapps" must be built individually and not included
   into the common build.

   QSINIT source code included into this SDK and buildable, but available for
   non-commercial use only.

   Games are ugly-looking, especially "anaconda" ;) It was found somewhere
   over net after one minute search, sorry.

Source tree:

   system\src\hc                 - common include
   system\src\init               - QSINIT boot module (OS2LDR file)
   system\src\ldrefi             - 32-bit part of QSINIT EFI executable
   tbin\qsinit_efi.zip           - 64-bit part of QSINIT EFI executable
                                   (requires EFI Toolkit)

   system\src\ldrapps            >> QSINIT modules
   system\src\ldrapps\hc           - QSINIT API headers
   system\src\ldrapps\start        - START module (second part of QSINIT core)
   system\src\ldrapps\runtime      - app/dll startup code and runtime lib files
   system\src\ldrapps\aoscfg       - ArcaOS os2ldr.cfg config partial support
   system\src\ldrapps\bootmenu     - boot menu
   system\src\ldrapps\bootos2      - OS/2 kernel loading
   system\src\ldrapps\cache        - disk i/o cache
   system\src\ldrapps\cmd          - command processor
   system\src\ldrapps\console      - advanced console support
   system\src\ldrapps\cplib        - code page support
   system\src\ldrapps\doshlp       - doshlp (binary file)
   system\src\ldrapps\extcmd       - some large shell commands & optional code
   system\src\ldrapps\fsfat        - FAT/FAT32/exFAT support (FatFs)
   system\src\ldrapps\fslib        - HPFS r/o support
   system\src\ldrapps\mtlib        - threads support (still in progress)
   system\src\ldrapps\partmgr      - partition management module
   system\src\ldrapps\sysview      - UI app (req. Turbo Vision)
   system\src\ldrapps\tv           - Turbo Vision
   system\src\ldrapps\vdisk        - PAE ram disk support module
   system\src\ldrapps\vmtrr        - Write Combining MTRR setup
   system\src\ldrapps\vhdd         - "file disk" support (self-implemented
                                     format & fixed size VHD)

   system\src\usrapps            >> additional apps
   system\src\usrapps\example      - example of LE EXE with wmake`s makefile
   system\src\usrapps\fixcfg       - example of CONFIG.SYS modification tool
                                     for ram disk boot.
   system\src\usrapps\memsize      - OS/2 application example: get PC memory
                                     size via new OEMHLP$ ioctl.
   system\src\usrapps\mptable      - mp table dump app (from bsd)
   system\src\usrapps\mttest       - example of multithreading API usage
   system\src\usrapps\rdtest       - OS/2 application example of IOCTL
                                     access to PAE RAM disk (speed test app
                                     and read disk to a file example)
   system\src\usrapps\sigtest      - signal() usage example

   system\src\tools\src          >> various tools source code
   system\src\tools\src\bin2h      - binary data to .h simple converter
   system\src\tools\src\bootset    - volume boot sector setup for OS/2 & Windows
   system\src\tools\src\def2lbc    - .ref file converter to various files
   system\src\tools\src\hd4disk    - OS/2 basedev driver for PAE RAM disk
   system\src\tools\src\mkbin      - tool for making QSINIT binary file
   system\src\tools\src\tinc2h     - .inc to .h simple converter
   system\src\tools\src\vpcfcopy   - write files to FAT disk image
   system\src\tools\src\watsym     - watcom .map to .sym converter

---------------------------------------------------------------------------

Some helpful key combinations:
( keys available during any keyboard read, in MT mode - at any time )

   Ctrl-Alt-F1  - switch debug serial port into VT100 terminal with current
                  console screen (only for 80x25), second press revert it back
   Ctrl-Alt-F2  - session list
   Ctrl-Alt-F3  - shared class list
   Ctrl-Alt-F4  - file table dump
   Ctrl-Alt-F5  - process tree dump (+ threads in MT mode)
   Ctrl-Alt-F6  - gdt dump
   Ctrl-Alt-F7  - idt dump
   Ctrl-Alt-F8  - page tables dump (very long, in paging mode only / it takes
                  minutes in EFI version, seriously)
   Ctrl-Alt-F9  - entire pci config space dump (very long)
   Ctrl-Alt-F10 - module table dump
   Ctrl-Alt-F11 - system memory table dump
   Ctrl-Alt-F12 - pool block list (very long)

TRACE command may help in strange situations. It supports tracing of all
described modules (both exports and shared classes).
