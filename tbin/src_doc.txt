Setup under OS/2 and Windows:
   1. set WATCOM=....  in path
   2. copy src\setup.cmd.template src\setup.cmd
   3. edit src\setup.cmd
   4. if QS is not in the root, update Doxyfile INPUT (optional)

Setup under Linux:
   1. install Open Watcom 1.9 (install hanged on my 64-bit Ubuntu, but works
      fine when just copied from 32-bit linux).
   2. call _setmod.sh - to set exec attr on all batches & executables
   3. make sure you have 32-bit libc on 64-bit system (else spprj module will
      fail).
   4. cp src\setup.sh.template src\setup.sh
   5. edit src\setup.sh (both WATCOM & QS_ROOT vars)
   6. all .cmd-s below have .sh pair for it

Build:
   _all.cmd                        - build all
   system\src\init\make.cmd        - build os2ldr
   system\src\ldrapps\make.cmd     - build all qsinit.ldi apps
   system\src\ldrapps\make.cmd app - build single qsinit.ldi app
                                     (ex. "make sysview")
   target dir - this (tbin) dir.

   Apps in "system\src\usrapps" must be built individually and not included
   into common qsinit build.

   QSINIT source code included into this SDK and buildable, but available for
   non-commercial use only.

   Games are ugly-looking, especially "anaconda" ;) It was found somewhere
   over net after one minute search, sorry.

Source tree:

   system\src\hc                 - common include
   system\src\init                 - QSINIT module (OS2LDR file)
   system\src\init\hc              - QSINIT include (exports)

   system\src\ldrefi               - 32-bit part of QSINIT EFI executable
   tbin\qsinit_efi.zip             - 64-bit part of QSINIT EFI executable
                                     (requires EFI Toolkit)

   system\src\ldrapps            - common QSINIT modules
   system\src\ldrapps\hc           - headers (exports) of all common modules
   system\src\ldrapps\runtime      - app/dll startup code and def/lib files
   system\src\ldrapps\bootmenu     - boot menu
   system\src\ldrapps\bootos2      - OS/2 kernel loading
   system\src\ldrapps\cache        - disk i/o cache
   system\src\ldrapps\cmd          - command processor
   system\src\ldrapps\console      - advanced console support
   system\src\ldrapps\doshlp       - doshlp (binary file)
   system\src\ldrapps\extcmd       - several large shell commands
   system\src\ldrapps\mtlib        - threads support (still in progress)
   system\src\ldrapps\partmgr      - partition management module
   system\src\ldrapps\start        - START module (second part of QSINIT core)
   system\src\ldrapps\sysview      - UI app (req. Turbo Vision)
   system\src\ldrapps\tv           - Turbo Vision
   system\src\ldrapps\vdisk        - PAE ram disk support module
   system\src\ldrapps\vmtrr        - Write Combining MTRR setup
   system\src\ldrapps\vhdd         - simple "file disk" (virtual hdd for
                                     PARTMGR testing)

   system\src\usrapps            - additional apps
   system\src\usrapps\example      - example of LE EXE with wmake`s makefile
   system\src\usrapps\mptable      - mp table dump app (from bsd)
   system\src\usrapps\rdtest       - OS/2 application example of IOCTL
                                     access to PAE RAM disk (speed test app
                                     and read disk to file example)

   system\src\tools\src          - various build tools source code
   system\src\tools\src\bin2h      - binary data to .h simple converter
   system\src\tools\src\bootset    - volume boot sector setup for OS/2 & Windows
   system\src\tools\src\def2lbc    - .ref file converter to various files
   system\src\tools\src\hd4disk    - OS/2 basedev driver for PAE RAM disk
   system\src\tools\src\mkbin      - tool for making QSINIT binary file
   system\src\tools\src\tinc2h     - .inc to .h simple converter
   system\src\tools\src\vpcfcopy   - write files to FAT disk image

---------------------------------------------------------------------------

Some helpful key combinations for ones, who not read Doxygen doc:
( keys available in cmd shell or while pause message is active, log_hotkey()
  can be used in own code to filter and call all of this )

   Ctrl-Alt-F3 - shared classes dump
   Ctrl-Alt-F4 - file table dump
   Ctrl-Alt-F5 - process tree dump
   Ctrl-Alt-F6 - gdt dump
   Ctrl-Alt-F7 - idt dump
   Ctrl-Alt-F8 - page tables dump (very long, in paging mode only / it takes
                 minutes in EFI version, seriously)
   Ctrl-Alt-F9 - entire pci config space dump (very long)
   Ctrl-Alt-F10 - module table dump
   Ctrl-Alt-F11 - system memory table dump
   Ctrl-Alt-F12 - pool block list (very long)

TRACE command can help in strange situations. It supports tracing of all
described module`s exports and shared classes. Trace info stored in TRC files
(one per module) in LDI archive.
