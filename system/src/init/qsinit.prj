[project]
name=qsinit

; 0.01 - first version
; 0.02 - stable kernel boot
; 0.03 - FAT switched to LFN
; 0.04 - rev 100, 1 year of svn, storage/log added
; 0.05 - rev 128, trace added
; 0.06 - rev 150, mtrr, pci, vmtrr.exe, fat32 boot
; 0.07 - rev 168, 3 years ;), primary creation, fat32 format, lvm
; 0.08 - rev 200, cache, disk editor, wlink for binary files
; 0.09 - rev 225, PAE paging mode, nice disk management, graphic console
; 0.10 - rev 256, bootable PAE ram disk
; 0.11 - rev 277, 4 years, GPT support, huge disk i/o, memory view
; 0.12 - rev 282, zero-based FLAT mode, new linking of QSINIT binary 
version=0x0012

;
; some notes about current crazy linking + WASM:
; * all assumes in 32-bit objects except unpack.asm must be FLAT.
; * all variables/offsets in 16-bit segments must be defined NOT in
;   the same file with 32-bit code, which use it and exported to
;   this files as 32-bit.
;

[config]
0=Debug
1=Release
2=Verbose

[vars]
aa=wasm
cc=wcc386
cc16=wcc
chgn=chgnam
out=$(outdir)/

*asm=$(outdir)\$(*cur_fp).obj|$(*cur_name)| @echo $(*cur_name) | \
     $(aa) $(ainc) $(aflags)$*.obj $(*cur_name)

*c=$(outdir)\$(*cur_fp).obj|$(*cur_name)| @echo $(*cur_name) | \
     $(cc) $(cinc) $(cflags)$* $(*cur_name)

*cc=$(outdir)\$(*cur_fp).obj|$(*cur_pref).c| @echo $(*cur_fp).c | \
     $(cc16) $(ccinc) $(ccflags)$* $(*cur_pref).c | \
     $(chgn) misc\init16.pat $@ >nul

*dir=$(*cur_name)|.SYMBOLIC|@if not exist $* mkdir $*

*inc=$(outdir)\$(*cur_fp).h|$(*cur_name)| @echo $(*cur_name) | \
     inc2h $(*cur_name) $@ /p1

*cln=clean|.SYMBOLIC|@$(&clean)

&ver=inc\version.inc
&clean=$(outdir)\cleanall.cmd

aflags=-d1 -mt -zq -6p -i=%(QS_BASE)\hc -fo=

cflags=-4s -ecd %(QS_CFLAGS) -zld -s -mf -os -Ihc -i=hc -i=fat -i=zip \
       -i=$(outdir) -fo=

ccflags=-ecd -fp3 -fpi87 -q -zl -zfp -zgp -5 -zp1 -i=hc -i=$(outdir) -s -os \
        -nc=LCODE -nt=TEXT16 -bt%(QS_NAME) -fo=

ld=@wlink

cinc=
ccinc=$(cinc)
ainc=
outdir=bld\$(config)

[vars.*.0]
cinc=-DDEBUG -DVERBOSE_LOG
ainc=-dDEBUG
&watlnk=$(outdir)\qsinit.lnk

[vars.*.1]
cinc=-ox
&watlnk=$(outdir)\qsinit.lnk

[vars.*.2]
cinc=-DDEBUG -DINITDEBUG -DVERBOSE_LOG
ainc=-dDEBUG -dINITDEBUG
&watlnk=$(outdir)\qsinit.lnk

[files]
bld.dir $(outdir).dir clean.cln
..\hc\inc\ioint13.inc ..\hc\inc\seldesc.inc ..\hc\inc\qsconst.inc 
..\hc\inc\filetab.inc inc\qsinit.inc inc\dskinfo.inc inc\qsbinfmt.inc
start.asm pm_open.asm pm_main.asm meminit.cc misc\timer.asm init32.c
disk1.c misc\logmgr.c misc\iniparm.c misc\unpack.asm misc\util16.asm
misc\text.asm misc\util.asm misc\viofunc.c misc\disk.asm misc\wcrt.asm
misc\membase.c misc\fileio.c misc\rmcall.asm misc\exptable.asm
fat\diskio.c fat\ff.c misc\mdt.c misc\prn16.asm misc\log.asm
misc\print.c misc\timer32.asm
zip\puff.c zip\crc32.c zip\unzip.c

[make_footer]
MAKEDIRS : bld.dir $(outdir).dir
    @echo Building ...

start.asm : inc\version.inc

nolink : $(**dir) $(**inc) @@wait $(**asm) $(**c) $(**cc)

[&ver]
db 'QSinit $(vershort), rev $(svnrev), $(config) build at $(timestr)',0,10
db '@#QS:$(vershort).$(svnrev)#@  QSinit loader',0

[&watlnk]
sys os2v2_dll
name $(outdir)\OS2LDR.DLL
file /[[$(**asm)! !,]]
file /[[$(**c)! !,]]
file /[[$(**cc)! !,]]
order clname INIT
      clname LCODE
      clname LDATA segment DATA16 segment CONST3 segment CONST4
      clname FAR_DATA
      clname BSS16 segment BSSINIT segment _BSS16 segment BSSFINI
      clname CODE
      clname DATA
      clname BSS

#NOEMIT on any BSS produce wrong page list in LX here

op start=init32call
op mixed1632
op statics
op map=OS2LDR.MAP
sort global
op nod
op quiet
op togglerelocs

[&clean]
@echo off
echo Cleaning ...
cd $(outdir)
if exist *.h @del *.h
if exist *.obj @del *.obj
if exist *.lst @del *.lst
if exist os2ldr.* @del os2ldr.*
cd ..\..

[config.0,1,2]
*out=os2ldr | nolink | \
     @echo Linking ... | \
     $(ld) @$(&watlnk) | \
     mkbin -hdr -pack $(outdir)\OS2LDR.DLL OS2LDR
