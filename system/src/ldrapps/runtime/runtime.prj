;
; runtime.lib - runtime lib for all except start
; imp_st.lib  - runtime lib for start module only (it allow him to import
;               functions from self)
;
[project]
name=runtime
version=0x0001

[config]
0=Common

[vars]
aa=@wasm
cc=@wcc386
cpp=@wpp386
lib=@wlib
lbc=@ref2lbc

*asm=$(outdir)\$(*cur_fp).obj|$(*cur_name)| @echo $(*cur_name) | \
     $(aa) $(ainc) $(aflags)$*.obj $(*cur_name)

*c=$(outdir)\$(*cur_fp).obj|$(*cur_name)| @echo $(*cur_name) | \
     $(cc) $(cinc) $(cflags)$*.obj $(*cur_name)

*cpp=$(outdir)\$(*cur_fp).obj|$(*cur_name)| @echo $(*cur_name) | \
     $(cpp) $(cinc) $(cppflags)$*.obj $(*cur_name)

*ref=$(outdir)\$(*cur_fp).lib|$(*cur_name)| @echo $(*cur_name) | \
     $(lbc) as2 $(*cur_name) $(outdir)\__$(*cur_fp).asm $(outdir)\__$(*cur_fp).lbc | \
     $(lib) -b -q -io $* @$(outdir)\__$(*cur_fp).lbc | \
     $(aa) $(ainc) $(aflags)$(outdir)\__$(*cur_fp).obj $(outdir)\__$(*cur_fp).asm | \
     $(lib) -b -q $* $(outdir)\__$(*cur_fp).obj | \
     $(del) $(outdir)\__$(*cur_fp).lbc | \
     $(del) $(outdir)\__$(*cur_fp).asm

*def=$(outdir)\$(*cur_fp)2.lib|$(*cur_fp).ref| @echo $(*cur_name) | \
     $(lbc) lb2 $(*cur_fp).ref $(outdir)\$(*cur_fp).lbc | \
     $(lib) -b -q -io $* @$(outdir)\$(*cur_fp).lbc | \
     $(del) $(outdir)\$(*cur_fp).lbc

*inc=$(outdir)\$(*cur_fp).h|$(*cur_name)| @echo $(*cur_name) | \
     inc2h $(*cur_name) $@ /p1

*trace=$(outdir)\$(*cur_fp).trc|$(*cur_fp).ref| @echo $(*cur_fp).trc | \
     $(lbc) trc $(*cur_fp).ref $@

aflags=-mf -4p -zq -i=%(QS_BASE)\hc -fo=

commonflags=-4s %(QS_CFLAGS) -s -mf -ox -i=%(QS_BASE)\init\hc -fo=

cflags=-ecc $(commonflags)

cppflags=-i=..\hc -i=..\hc\rt -zv $(commonflags)

cinc=
ccinc=$(cinc)
ainc=
bld_dir=bld
msgdir=msg
outdir=$(bld_dir)\$(config)
outname=$(name).lib
&rsp1=$(outdir)\wlib.rsp
&rsp2=$(outdir)\wlibs.rsp
del=@del
copy=@copy

[vars.linux]
del=rm
copy=cp

[files]
qsinit.ref start.ref console.ref partmgr.ref start.def cache.ref vdisk.ref
cplib.ref vhdd.ref
start.trace qsinit.trace partmgr.trace cplib.trace vhdd.trace
init.asm initdll.asm cpproute.asm
rtcode.c defdll.c cpplib.cpp watcinit.c common.c
rt\sp_defs.cpp rt\sp_ini.cpp rt\sp_str.cpp rt\qs_rt.cpp

[make_footer]
$(outdir) : .DIRECTORY

MAKEDIRS : $(outdir)

hello : .SYMBOLIC
    @echo Building $(name)...

nolink : MAKEDIRS hello @@wait $(**c) $(**cpp) $(**asm) $(**ref) @@wait $(**def)

packtrace : .DIRECTORY $(msgdir)
    $(copy) $(outdir)\*.trc $(msgdir) >nul

tracefiles : $(**trace) @@wait packtrace @@wait
    @zip -q -9 -X -S -D -m %(QS_BIN)\%(QS_ARCH) $(msgdir)\*.*

#$(**inc) 

clean : .WIPEDIR $(outdir)
    @echo Cleaning $(name)...

[&rsp1]
$(**c) $(**ref) $(**cpp) $(outdir)\cpproute.obj

[&rsp2]
$(**cpp) 
$(outdir)\__qsinit.obj $(outdir)\initdll.obj
$(outdir)\rtcode.obj   $(outdir)\cpproute.obj 
$(outdir)\watcinit.obj
$(outdir)\qsinit.lib
$(**def) 

#$(**asm)

[config.0]
*out=$(outname) | nolink tracefiles | \
     @echo Creating lib... | \
     $(lib) -b -n -q $* @$(&rsp1) | \
     $(lib) -b -n -q imp_st.lib @$(&rsp2) | \
     rmdir $(msgdir)
