
  Import/export module reference file.


  REF2LBC tool can convert it to def, watcom .lnk script, ordinals.h include
          file and trace info file.
  Format is self-explaining, basically.

  "Exports" section (one per file) contains list of functions to import/export
  from the module. Data fields:

    * offset   = yes - direct export/import, without creating asm thunk
                       (flag must be used for any exported data).

    * expname  = ... - function name in module (alternative name for export
                       lib)

    * noimplib = yes - do not insert entry into import libraries (i.e. make
                       private module entry, function name is used only for
                       building module itself and not published)

    * group    = ... - trace group (use "trace on module group" to trace this
                       group calls)

    * trace format string:

      fmt    = [result][arg][arg][arg][arg] [.]
                . - ... argument (ignored now)

      result = [*][@]type
      arg    = [&|!][*][@]type
                * - pointer to next type
                & - out value (only with * or s/S)
                ! - input & output value (only with * or s/S)
                @ - print in hex form

      type   = s - char*
               c - char
               i - int/long
               b - unsigned char
               u - unsigned
               h - unsigned short
               q - unsigned long long
               I - signed long long (__int64)
               p - pointer
               v - void (for result/no args only, use "p" for void*)
               V - disable exit hook (no result/exit printing, for result only)
               S - wchar_t*
               C - wchar_t
               F - float (4-byte FP type)
               D - double (8-byte FP type)

      Example:
         char*  ctime_r(const time_t *timer, char* buffer);

         format = "s*@up" --> string (out hex ulong, pointer)

  "Class" sections (one per shared class, optional) - contain trace info
for shared classes. Because trace info is module-based, all infos placed
here, in companion to common exports.

  Class name and method list must be defined (in the order of declaration!).
  One note - "shared class" methods have two hidden parameters - "instance"
or "this" and "caller". Trace string must include both, i.e.

         u32t _std (*init)(void *bmp, u32t size);

  will be
         init = "upppu"
  not "upu" - like it looks in declaration.

  Maximum number of exports or methods per class - 32767.

  The reason to store trace info in DEF file is lazyness of any programmer,
which I know (including myself). Exporting of a new function is mandatory
point, where we can catch one and force him to fill the trace info.
